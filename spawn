const HARVESTER = 'h';
const BUILDER = 'b';
const GUARD = 'g';

const type_worker = {body:[WORK,CARRY,MOVE],name:"worker",memory:{role:HARVESTER}};
const type_builder = {body:[WORK,CARRY,MOVE],name:"builder",memory:{role:BUILDER}};
const type_fast_guard = {body:[ATTACK,MOVE,MOVE],name:"guard",memory:{role:GUARD}};
const type_slow_guard = {body:[ATTACK,ATTACK,MOVE],name:"guard",memory:{role:GUARD}};
const type_ranged_guard = {body:[RANGED_ATTACK,RANGED_ATTACK,MOVE],name:"guard",memory:{role:GUARD}};


function setup(spawn){
  var queue = [];
  // find the nearest Source
  var src = spawn.pos.findClosestByPath(FIND_SOURCES);
  //build 3 workers to service this spawn from this source
  queue.push({body:[WORK,CARRY,MOVE],name:"worker",memory:{role:HARVESTER,spawn:spawn.name,source:src.id}});
  queue.push({body:[WORK,CARRY,MOVE],name:"worker",memory:{role:HARVESTER,spawn:spawn.name,source:src.id}});
  queue.push({body:[WORK,CARRY,MOVE],name:"worker",memory:{role:HARVESTER,spawn:spawn.name,source:src.id}});
  //build a builder to create more stuff
  queue.push({body:[WORK,CARRY,MOVE],name:"builder",memory:{role:BUILDER}});
  // and then build guards
  queue.push(type_slow_guard);
  queue.push(type_fast_guard);
  spawn.memory.bq = queue;
  spawn.memory.next = 0;
  spawn.memory.nextBuild = queue[0];
  spawn.memory.resetTo = 4;//reset to guard when we hit the end of the queue
}

function buildNext(spawn){
  var oldState = spawn.memory;
  var result = spawn.createCreep(nbt.t.body,nbt.t.name + buildId,nbt.t.memory);
  var newState = {
    nextBuild:oldState.bq[oldState.next],
    next:(oldState.next == oldState.bq.length -1)?oldState.resetTo:oldState.next +1
  };
  return Object.assign(oldState,newState);
}

function checkBuild(spawn){
  //just had some energy dropped off, so check if we can build anything
  var nbt = spawn.memory.nextBuild;
  var canBuild = spawn.canCreateCreep(nbt.t.body);
  if(canBuild === ERR_NOT_ENOUGH_ENERGY){
    if(spawn.energy === spawn.energyCapacity){
      console.log("not enough capacity to build " + nbt.t.name);
      //can't build this creep, so move to the next creep
      //TODO: construct an extension
      spawn.memory = buildNext;
    }
  }
  if(canBuild === OK){
    var buildId = (spawn.memory.buildId || 0) +1;
    console.log("build id: "+ buildId);
    spawn.memory.buildId = buildId;
    console.log("create creep result: " + result);
    spawn.memory.nextBuild = buildOrder[nbt.next];
    console.log("next build: " + spawn.memory.nextBuild.t.name);
  }
}

module.exports = {
  setup,
  buildNext,
  checkBuild
};
